<?php
/*
 * This file is part of the arfaram/ezplatform-hubspot bundle.
 * Copyright (c) 2020 Ramzi Arfaoui  <ramzi_arfa@hotmail.de>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace EzPlatform\HubSpot\HubSpot\Repository\Storage\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\DBAL\Connection;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use EzPlatform\HubSpotBundle\Entity\HubSpot\ApiKey;

/**
 * ApiKeyRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApiKeyStorageRepository extends ServiceEntityRepository
{
    /** @var QueryBuilder $queryBuilder */
    public $queryBuilder;

    /** @var \Doctrine\DBAL\Connection */
    private $connection;

    /**
     * ActivitiesLogRepository constructor.
     * @param \Doctrine\Persistence\ManagerRegistry $registry
     */
    public function __construct(
        ManagerRegistry $registry,
        Connection $connection
    ) {
        parent::__construct($registry, ApiKey::class);
        $this->connection = $connection;
    }

    /**
     * @return \Doctrine\DBAL\Connection
     */
    public function getConnection()
    {
        return $this->connection;
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function selectRecord(): QueryBuilder
    {
        $this->queryBuilder = $this->createQueryBuilder('a')
            ->select('a')
            ->setMaxResults(1);

        return $this->queryBuilder;
    }

    /**
     * @todo createQueryBuilder->insert was added in later Doctrine version
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function insertRecord()
    {
        return $this->getEntityManager();
    }

    /**
     * @param \EzPlatform\HubSpotBundle\Entity\HubSpot\ApiKey $apiKey
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function updateRecord(ApiKey $apiKey)
    {
        $this->queryBuilder = $this->createQueryBuilder('a')
            ->update()
            ->set('a.apiKey', '?1')
            ->setParameter(1, $apiKey->getApiKey())
            ->set('a.timestamp', '?2')
            ->setParameter(2, $apiKey->getTimestamp())
            ->set('a.userId', '?3')
            ->setParameter(3, $apiKey->getUserId())
            ->set('a.data', '?4')
            ->setParameter(4, $apiKey->getData() ?? null)
            ->set('a.status', '?5')
            ->setParameter(5, $apiKey->getStatus() ?? null)
            ->where('a.id = ?6')
            ->setParameter(6, $apiKey->getId());

        return $this->queryBuilder;
    }
}
